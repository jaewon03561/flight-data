---
title: '뉴옥 비행장 데이터 분석'
author: 'oo조'
format:
    revealjs:
        theme: default
        reference-location: document
        css: mystyle.css
---

-   다음과 같이 비행장 데이터 `flights`와 `planes`를 병합한 데이터를 생성합니다.

``` {.python code-line-numbers="|9"}
#| echo: true
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from nycflights13 import flights, planes

mer_dat = pd.merge(flights, planes, on='tailnum', how='left')
mer_dat.info()
```

------------------------------------------------------------------------

```{python}
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from nycflights13 import flights, planes

mer_dat = pd.merge(flights, planes, on='tailnum', how='left')
mer_dat.info()
```

------------------------------------------------------------------------

1.  비행기 출발 시각(hour)과 출발 지연 시간(dep_delay)과의 관계

``` {.python code-line-numbers="|2-3|5-6|8-10"}
#| echo: true
mer_dat['hour'] = mer_dat['time_hour'].str.extract(r'(\d{2}):').astype(int)
set(mer_dat['hour']) # 6~8시는 출발하지 않는다. 

y = mer_dat.groupby('hour')['dep_delay'].mean().dropna() # na값인 5시 데이터 제거
x = y.index.astype(int)

x_reordered = np.concatenate([x[x >= 9], x[x < 9] + 24])
y_reordered = np.concatenate([y[x >= 9], y[x < 9]])
# 9시부터 시작할 수 있도록 정렬

plt.scatter(x_reordered, y_reordered)
plt.xlabel('dep_hour')
plt.ylabel('dep_delay')
plt.title('Correlate dep_hour with dep_delay')

xticks_ordered = list(range(9, 33))
xtick_labels = list(range(9, 24)) + list(range(0, 9))
plt.xticks(xticks_ordered, xtick_labels)
plt.xlim(8, 32)

max_idx = np.argmax(y_reordered)
max_x = x_reordered[max_idx]
max_y = y_reordered[max_idx]
plt.scatter(max_x, max_y, color='red')

plt.show()
```

------------------------------------------------------------------------

```{python}
mer_dat['hour'] = mer_dat['time_hour'].str.extract(r'(\d{2}):').astype(int)
set(mer_dat['hour']) # 6~8시는 출발하지 않는다. 

y = mer_dat.groupby('hour')['dep_delay'].mean().dropna() # na값인 5시 데이터 제거
x = y.index.astype(int)

x_reordered = np.concatenate([x[x >= 9], x[x < 9] + 24])
y_reordered = np.concatenate([y[x >= 9], y[x < 9]])

plt.scatter(x_reordered, y_reordered)
plt.xlabel('dep_hour')
plt.ylabel('dep_delay')
plt.title('Correlate dep_hour with dep_delay')

xticks_ordered = list(range(9, 33))
xtick_labels = list(range(9, 24)) + list(range(0, 9))
plt.xticks(xticks_ordered, xtick_labels)
plt.xlim(8, 32)

max_idx = np.argmax(y_reordered)
max_x = x_reordered[max_idx]
max_y = y_reordered[max_idx]
plt.scatter(max_x, max_y, color='red')

plt.show()
```

출발 시각이 최고점인 0시에 가까워 질수록 출발 지연 시간이 길어지는 것을 확인할 수 있다.

------------------------------------------------------------------------

2.  계절별 출발 지연 시간

``` {.python code-line-numbers="|2-5"}
#| echo: true
spring = mer_dat.loc[(mer_dat['month'] >= 3) & (mer_dat['month'] <= 5)]
summer = mer_dat.loc[(mer_dat['month'] >= 6) & (mer_dat['month'] <= 8)]
autumn = mer_dat.loc[(mer_dat['month'] >= 9) & (mer_dat['month'] <= 11)]
winter = mer_dat.loc[(mer_dat['month'] == 12) | (mer_dat['month'] <= 2)]

seasons = ['spring', 'summer', 'autumn', 'winter']
delays = [spring['dep_delay'].mean(),
          summer['dep_delay'].mean(),
          autumn['dep_delay'].mean(),
          winter['dep_delay'].mean()]
colors = ['#FFB6C1', '#87CEEB', '#D2691E', '#4682B4']

plt.bar(seasons, delays, color = colors)
plt.ylabel('dep_delay')
plt.xlabel("season") 
plt.title('Correlate season with dep_delay')
plt.show()
```

------------------------------------------------------------------------

```{python}
dep_delay_avg = mer_dat.groupby("month")["dep_delay"].mean()

spring = mer_dat.loc[(mer_dat['month'] >= 3) & (mer_dat['month'] <= 5)]
summer = mer_dat.loc[(mer_dat['month'] >= 6) & (mer_dat['month'] <= 8)]
autumn = mer_dat.loc[(mer_dat['month'] >= 9) & (mer_dat['month'] <= 11)]
winter = mer_dat.loc[(mer_dat['month'] == 12) | (mer_dat['month'] <= 2)]

seasons = ['spring', 'summer', 'autumn', 'winter']
delays = [spring['dep_delay'].mean(),
          summer['dep_delay'].mean(),
          autumn['dep_delay'].mean(),
          winter['dep_delay'].mean()]
colors = ['#FFB6C1', '#87CEEB', '#D2691E', '#4682B4']

plt.bar(seasons, delays, color = colors)
plt.ylabel('dep_delay')
plt.xlabel("season") 
plt.title('Correlate season with dep_delay')
plt.show()
```

사계절 중 여름이 가장 높은 지연 시간을 가지고, 가을이 가장 낮은 지연 시간을 가진다.

------------------------------------------------------------------------

```{python}
dep_delay_avg = mer_dat.groupby("month")["dep_delay"].mean()

spring = mer_dat.loc[(mer_dat['month'] >= 3) & (mer_dat['month'] <= 5)]
summer = mer_dat.loc[(mer_dat['month'] >= 6) & (mer_dat['month'] <= 8)]
autumn = mer_dat.loc[(mer_dat['month'] >= 9) & (mer_dat['month'] <= 11)]
winter = mer_dat.loc[(mer_dat['month'] == 12) | (mer_dat['month'] <= 2)]

seasons = ['spring', 'summer', 'autumn', 'winter']
delays = [spring['dep_delay'].mean(),
          summer['dep_delay'].mean(),
          autumn['dep_delay'].mean(),
          winter['dep_delay'].mean()]
colors = ['#A9A9A9', '#87CEEB', '#A9A9A9', '#A9A9A9']

plt.bar(seasons, delays, color = colors)
plt.ylabel('dep_delay')
plt.xlabel("season") 
plt.title('Correlate season with dep_delay')
plt.show()
```

여름은 높은 기온으로 인해 공기 밀도가 낮아져 항공기의 이륙 성능이 저하된다.

또한 여름에는 폭우, 천둥번개, 허리케인 등 강한 기상 현상에 의해 지연이 다수 발생한다.

------------------------------------------------------------------------

```{python}
dep_delay_avg = mer_dat.groupby("month")["dep_delay"].mean()

spring = mer_dat.loc[(mer_dat['month'] >= 3) & (mer_dat['month'] <= 5)]
summer = mer_dat.loc[(mer_dat['month'] >= 6) & (mer_dat['month'] <= 8)]
autumn = mer_dat.loc[(mer_dat['month'] >= 9) & (mer_dat['month'] <= 11)]
winter = mer_dat.loc[(mer_dat['month'] == 12) | (mer_dat['month'] <= 2)]

seasons = ['spring', 'summer', 'autumn', 'winter']
delays = [spring['dep_delay'].mean(),
          summer['dep_delay'].mean(),
          autumn['dep_delay'].mean(),
          winter['dep_delay'].mean()]
colors = ['#A9A9A9', '#A9A9A9', '#A9A9A9', '#4682B4']

plt.bar(seasons, delays, color = colors)
plt.ylabel('dep_delay')
plt.xlabel("season") 
plt.title('Correlate season with dep_delay')
plt.show()
```

겨울철에는 눈, 얼음, 결빙 등으로 인해 활주로가 이상적인 상태를 유지하기 힘들다.

또한 불확실한 기상 조건으로 안개나 눈보라 등으로 인한 시정 불량이 발생하여 지연이 다수 발생한다.

------------------------------------------------------------------------

```{python}
dep_delay_avg = mer_dat.groupby("month")["dep_delay"].mean()

spring = mer_dat.loc[(mer_dat['month'] >= 3) & (mer_dat['month'] <= 5)]
summer = mer_dat.loc[(mer_dat['month'] >= 6) & (mer_dat['month'] <= 8)]
autumn = mer_dat.loc[(mer_dat['month'] >= 9) & (mer_dat['month'] <= 11)]
winter = mer_dat.loc[(mer_dat['month'] == 12) | (mer_dat['month'] <= 2)]

seasons = ['spring', 'summer', 'autumn', 'winter']
delays = [spring['dep_delay'].mean(),
          summer['dep_delay'].mean(),
          autumn['dep_delay'].mean(),
          winter['dep_delay'].mean()]
colors = ['#FFB6C1', '#A9A9A9', '#D2691E', '#A9A9A9']

plt.bar(seasons, delays, color = colors)
plt.ylabel('dep_delay')
plt.xlabel("season") 
plt.title('Correlate season with dep_delay')
plt.show()
```

봄과 달리 가을에 지연이 적은 이유는 가을은 기온 변화가 적고 기상 조건이 안정적이나,

봄은 가을과 달리 날씨의 변화 폭이 크기 때문에 지연이 다수 발생한다.

------------------------------------------------------------------------

3.  비행기 제작 연도별 출발 지연 시간

```{python}
#| echo: true
delay_by_year = mer_dat.groupby("year_y")["dep_delay"].mean().reset_index()

plt.figure(figsize=(10, 5))
sns.regplot(
    x = delay_by_year["year_y"],
    y = delay_by_year["dep_delay"],
    line_kws={"color": "red"},
    scatter_kws={"s": 50, "alpha": 0.5}
)
plt.xlabel('manufacturing year')
plt.ylabel('Average Departure Delay (minutes)')
plt.title('Correlate manufacturing year with Average Departure Delay')
plt.grid(True)
```

---

------------------------------------------------------------------------

4.  비행기 엔진 종류 별 속도 분석

```{python}
#| echo: true
#| output-location: slide
mer_dat["air_time_hours"] = mer_dat["air_time"] / 60
mer_dat["speed_mph"] = mer_dat["distance"] / mer_dat["air_time_hours"]

engine_speed = mer_dat.groupby("engine")["speed_mph"].mean().reset_index()

plt.figure(figsize=(10, 5))
sns.barplot(x="engine", y="speed_mph", data=engine_speed, palette="coolwarm")

plt.xlabel("Engine Type")
plt.ylabel("Average Speed (mph)") # miles per hour
plt.title("Average Speed by Engine Type")
plt.xticks(rotation=45)
plt.grid(axis="y", linestyle="--", alpha=0.7)
plt.show()
```